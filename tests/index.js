// Generated by LiveScript 1.5.0
/**
 * @package Detox utils
 * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @license 0BSD
 */
(function(){
  var lib, test;
  lib = require('..');
  test = require('tape');
  test('Utils', function(t){
    var random1, random2, random_int1, random_int2, array, random_item, hex_array, hex, string, string_array, array1, array2, arrays_result, concatenated, map, u8_1, u8_2, set, base58, x, y, i1;
    t.plan(34);
    random1 = lib.random_bytes(10);
    random2 = lib.random_bytes(10);
    t.ok(random1 instanceof Uint8Array, 'Random bytes are in Uint8Array');
    t.equal(random1.length, 10, 'Random bytes of correct length');
    t.notEqual(random1.join(','), random2.join(','), 'Random bytes are random');
    random_int1 = lib.random_int(1, 999);
    random_int2 = lib.random_int(1, 999);
    t.notEqual(random_int1, random_int2, 'Random ints are random');
    array = [1, 2, 3];
    random_item = lib.pull_random_item_from_array(array);
    t.equal(array.length, 2, 'Pulled item from array');
    hex_array = Uint8Array.of(1, 2, 3, 5, 6);
    hex = '0102030506';
    t.equal(lib.array2hex(hex_array), hex, 'Array to hex converted correctly');
    t.equal(lib.hex2array(hex).join(','), hex_array.join(','), 'Hex to array converted correctly');
    string = 'Hello, world ðŸ˜Š';
    string_array = Uint8Array.of(72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 32, 240, 159, 152, 138);
    t.equal(lib.string2array(string).join(','), string_array.join(','), 'String to Uint8Array converted correctly');
    t.equal(lib.array2string(string_array), string, 'Uint8Array to string converted correctly');
    t.ok(lib.are_arrays_equal(Uint8Array.from(hex_array), hex_array), 'Arrays are equal');
    t.notOk(lib.are_arrays_equal(hex_array, string_array), 'Arrays are not equal');
    array1 = Uint8Array.of(1, 2);
    array2 = Uint8Array.of(3, 4);
    arrays_result = Uint8Array.of(1, 2, 3, 4);
    concatenated = lib.concat_arrays([array1, array2]);
    t.equal(concatenated.length, 4, 'Concatenated array has expected length');
    t.ok(concatenated instanceof Uint8Array, 'Concatenated array is Uint8Array');
    t.equal(concatenated.join(','), arrays_result.join(','), 'Concatenated array has expected contents');
    map = lib.ArrayMap();
    u8_1 = Uint8Array.of(1, 2, 3);
    u8_2 = Uint8Array.of(1, 2, 3);
    t.equal(map.size, 0, 'ArrayMap empty initially');
    t.notOk(map.has(u8_1), "ArrayMap doesn't have array initially");
    map.set(u8_1, u8_1);
    t.ok(map.has(u8_1), 'ArrayMap has item after addition');
    t.ok(map.has(u8_2), 'ArrayMap has item that is a different array, but with the same contents');
    set = lib.ArraySet();
    t.equal(set.size, 0, 'ArraySet empty initially');
    t.notOk(set.has(u8_1), "ArraySet doesn't have array initially");
    set.add(u8_1);
    t.ok(set.has(u8_1), 'ArraySet has item after addition');
    t.ok(set.has(u8_2), 'ArraySet has item that is a different array, but with the same contents');
    t.equal(lib.base58_encode(new Uint8Array(0)), '', 'Base-58 encoded empty string correctly');
    t.equal(lib.base58_decode('').join(','), '', 'Base-58 decoded empty string correctly');
    array = Buffer.from('61', 'hex');
    base58 = '2g';
    t.equal(lib.base58_encode(array), base58, 'Base-58 encoded correctly #1');
    t.equal(lib.base58_decode(base58).join(','), array.join(','), 'Base-58 decoded correctly #1');
    array = Buffer.from('626262', 'hex');
    base58 = 'a3gV';
    t.equal(lib.base58_encode(array), base58, 'Base-58 encoded correctly #2');
    t.equal(lib.base58_decode(base58).join(','), array.join(','), 'Base-58 decoded correctly #2');
    array = Buffer.from('73696d706c792061206c6f6e6720737472696e67', 'hex');
    base58 = '2cFupjhnEsSn59qHXstmK2ffpLv2';
    t.equal(lib.base58_encode(array), base58, 'Base-58 encoded correctly #3');
    t.equal(lib.base58_decode(base58).join(','), array.join(','), 'Base-58 decoded correctly #3');
    x = 0;
    lib.timeoutSet(0.001, function(){
      ++x;
    });
    clearTimeout(lib.timeoutSet(0.001, function(){
      ++x;
    }));
    setTimeout(function(){
      t.equal(x, 1, 'timeoutSet works correctly');
    }, 50);
    y = 0;
    i1 = lib.intervalSet(0.001, function(){
      ++y;
    });
    clearInterval(lib.intervalSet(0.001, function(){
      ++x;
    }));
    setTimeout(function(){
      clearInterval(i1);
      t.notEqual(y, 0, 'intervalSet works correctly');
      t.equal(x, 1, 'intervalSet works correctly');
    }, 100);
    setTimeout(function(){
      var console_error;
      console_error = console.error;
      console.error = function(){
        console.error = console_error;
        t.pass('error_handler catches errors');
      };
      new Promise(function(){
        throw new Error;
      })['catch'](lib.error_handler);
    }, 200);
    setTimeout(function(){
      console.error = function(){
        console.error = console_error;
        t.fail("error_handler doesn't catch other things");
      };
      new Promise(function(){
        throw 'Hello there';
      })['catch'](lib.error_handler);
    }, 300);
  });
}).call(this);
